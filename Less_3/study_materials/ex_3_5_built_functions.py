# В языке Python предусмотрены встроенные функции. Их логика работы скрыта от разработчиков, а
# имена зарезервированы. Достаточно знать, какие данные эти функции могут принимать и какой
# результат возвращать. С частью функций мы уже познакомились ранее (input(), type(), int(), str(),
# float(), bool()).

# ord() Принимает Unicode-символ и возвращает соответствующий код (целое число)
# chr() Принимает целое число и возвращает Unicode-символ, соответствующий переданному числу (коду)
# len() Принимает любой объект-последовательность (строка, набор байтов, список,
#       кортеж) или объект-коллекцию (словарь, множество) и возвращает число элементов последовательности

print(ord("g"))
print(chr(103))
print(len("abracadabra"))

# abs() Принимает целое число или число с плавающей точкой. Возвращает абсолютное значение числа (по модулю)
print(abs(2))
print(abs(-2))
# round() Принимает число с плавающей точкой. Округляет число до ближайшего целого числа.
#           Может принимать число знаков после запятой, до которых необходимо выполнить округление
print(round(2.6743))
print(round(-2.6743))
print(round(2.6743, 2))
print(round(-2.6743, 2))
# divmod() Принимает два числа, возвращает также два числа (частное и остаток от деления чисел)
print(divmod(4, 2))
print(divmod(5, 2))
# pow() Принимает два числа. Позволяет возвести первое число в указанную степень
print(pow(2, 4))
# max() Принимает итерируемый объект и возвращает самый большой элемент
iter_obj = [20, 2, 5, 99]
print(max(iter_obj))
iter_obj = "abrakadabra"
print(max(iter_obj))
# min() Принимает итерируемый объект и возвращает наименьший элемент
iter_obj = [20, 2, 5, 99]
print(min(iter_obj))
iter_obj = "abrakadabra"
print(min(iter_obj))
# sum() Суммирует элементы последовательности
iter_obj = [20, 2, 5, 99]
print(sum(iter_obj))
iter_obj = (20, 2, 5, 99)
print(sum(iter_obj))

# Функция range() для многократно выполняемых действий
print(list(range(7)))  # целые числа в диапазоне [0, 7)
print(list(range(2, 8)))  # целые числа в диапазоне [2, 8)
print(list(range(1, 9, 2)))  # целые числа в диапазоне [1, 9) с шагом 2
print(list(range(1, -7, -2)))  # целые числа в диапазоне [1, -7) с шагом -2
print(list(range(0)))  # целые числа в диапазоне (0, 0)
print(list(range(1, 0)))  # целые числа в диапазоне (1, 0)

# Функция range() может использоваться в циклах:

for el in range(4, 20, 4):
    res = el / 2
    print(f"Результат деления {el} на 2: {int(res)}")
    